#+title My Emacs config
#+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el

* My Emacs Config
  #+begin_src emacs-lisp
  ;; This is writing to new-init.el not my real init.el (from org!)
  #+end_src
** Set up basic settings
#+begin_src emacs-lisp

(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

(menu-bar-mode -1)            ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)

;; (set-face-attribute 'default nil :font "Fira Code Retina" :height 280)


(global-display-line-numbers-mode t)
(column-number-mode)
;; disable line numbers for some modes
(dolist (mode '(org-mode-hook
		term-mode-hook
		shell-mode-hook
		eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))


;; Make ESC quit prompts
;; (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Prep Package manager
#+begin_src emacs-lisp
   
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src
** Add desired packages
#+begin_src emacs-lisp

(use-package command-log-mode)

(use-package swiper :ensure t)

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

;; how to set a global key binding in vanilla emacs
;; (global-set-key (kbd "C-M-J") 'counsel-switch-buffer)
;; how to set a mode specific keybinding in vanilla emacs
;; (define-key emacs-lisp-mode-map (kbd "C-x M-t") 'counsel-load-theme)
;; note that we will probably set key bindings in the bind or config sections of use-package or use general (a package) to set them

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("7964b513f8a2bb14803e717e0ac0123f100fb92160dcf4a467f530868ebaae3e" "32f22d075269daabc5e661299ca9a08716aa8cda7e85310b9625c434041916af" default))
 '(package-selected-packages
   '(visual-fill-column forge evil-magit magit counsel-projectile projectile hydra evil-collection general all-the-icons doom-themes helpful ivy-rich which-key rainbow-delimiters counsel doom-modeline use-package ivy command-log-mode)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(use-package doom-themes)
(load-theme 'doom-solarized-light t)

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

;; NOTE: The first time you load your configuration on a new machine, you'll need to run the following command interactively so that the mode like icons display correctly:
;; M-x nerd-icons-install-fonts
(use-package nerd-icons)

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history)))

(use-package helpful
  :custom
  (council-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
  
(use-package general
  :config
  (general-evil-setup t)

  (general-create-definer rune/leader-keys
			  :keymaps '(normal insert visual emacs)
 			  :prefix "SPC"
			  :global-prefix "C-SPC")
  (rune/leader-keys
   "t" '(:ignore t :which-key "toggles")
   "tt" '(counsel-load-theme :which-key "choose theme"))

  (rune/leader-keys
   "b" '(:ignore t :which-key "buffer")
   "bb" '(switch-to-buffer :which-key "choose buffer"))
  )

;; can set bindings in big chunks like this
;;(general-define-key
;; "M-x" 'amx
;; "C-s" 'counsel-grep-or-swiper)

;; (defun rune/evil-hook()
  ;; (dolist (mode '(custom-mode
		  ;; eshell-mode
		  ;; git-rebase-mode
		  ;; erc-mode
		  ;; circe-server-mode
		  ;; circe-chat-mode
		  ;; circe-query-mode
		  ;; term-mode))
    ;; (when (fboundp mode)  ; Check if the mode is defined
      ;; (add-to-list 'evil-emacs-state-modes mode))))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  ;; :hook (evil-mode . rune/evil-hook)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  ;; (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  ;; What this actually means is that if the following are turned on, wrapped text can be navigated with regular motions
  ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  ;; (evil-set-initial-state 'dashboard-mode 'normal)
  )

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
(rune/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(evil-collection-magit-setup)

(use-package forge
  :after magit
  :config
  (setq auth-sources '("~/.authinfo")))
;; https://magit.vc/manual/ghub/Storing-a-Token.html

(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  ;; (setq evil-auto-indent nil)
  )

(use-package org
  :config
  (setq org-ellipsis " ▾"
	;; org-hide-emphasis-markers t
	)
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-agenda-files '("~/.emacs.d/tasks.org"))
  )

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

(require 'org-tempo)
;; don't ask for permission to run each time
(setq org-confirm-babel-evaluate nil)

;; now if we type <el and hit tab, we will get an emacs-lisp code block
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src
** Org Mode
   Automatically tangle out our emacs.org config file when we save it:
   #+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
(when (string-equal (buffer-file-name)
(expand-file-name "~/.emacs.d/config.org"

(let ((org-confirm-babel-eval nil))
(org-babel-tagnle)))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config))) 
   #+end_src
** Applications
*** Some App
We can configure apps outside of emacs in org files as well
Usually these write to a file in our directory that are symbolically linked to where the actual config should be

Can save output of one block and use that in another!
#+NAME: the-value
#+begin_src emacs-lisp
(+ 100 55)
#+end_src

#+begin_src conf-unix :tangle .config/some-app/config :mkdirp yes :noweb yes

value = <<the-value()>>

#+end_src
