#+title My Emacs config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* My Emacs Config
** Basic Settings
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)


  (global-display-line-numbers-mode t)
  (column-number-mode)
  ;; disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (setq scroll-margin 8)
  (setq hscroll-margin 8)
  (setq scroll-conservatively 1000)

#+end_src
** Prep Package manager
#+begin_src emacs-lisp
  
  ; Make sure we have melpa and can use-package + set up use-package

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src
** Add desired packages
#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

  (use-package doom-themes
    :init
    (load-theme 'doom-solarized-light t))

  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-C-d-scroll nil)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-undo-system 'undo-redo)
    (setq evil-want-fine-undo t)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; NOTE: The first time you load your configuration on a new machine, you'll need to run the following command interactively so that the mode like icons display correctly:
  ;; M-x nerd-icons-install-fonts
  (use-package nerd-icons)

  (use-package which-key
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 0.1))


  (use-package helpful
    :custom
    (council-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (defvar-keymap rune/toggle-keymap)
    (rune/leader-keys
      ;; :keymaps 'rune/toggle-keymap
      "t" '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "ts" '(hydra-text-scale/body :which-key "scale text"))

    (defvar-keymap rune/buffer-keymap)
    (rune/leader-keys
      ;; :keymaps 'rune/buffer-keymap
     "b" '(:ignore t :which-key "buffer")
     "bb" '(switch-to-buffer :which-key "switch to buffer")
     "bk" '(kill-buffer-and-window :which-key "kill buffer"))

    (defvar-keymap rune/window-keymap)
    (rune/leader-keys
      ;; :keymaps 'rune/window-keymap
     "w" '(:ignore t :which-key "window")
     "wk" '(evil-window-up :which-key "window up")
     "wj" '(evil-window-up :which-key "window down")
     "wh" '(evil-window-left :which-key "window left")
     "wl" '(evil-window-right :which-key "window right")
     "wc" '(evil-window-delete :which-key "close window")
     "wC" '(delete-other-windows :which-key "close all other windows"))

    (defvar-keymap rune/code-keymap)
    (rune/leader-keys
      ;; :keymaps 'rune/code-keymap
     "c" '(:ignore t :which-key "code")
     "cd" '(xref-find-definitions :which-key "jump to definition"))

    (defvar-keymap rune/file-keymap)
    (rune/leader-keys
      ;; :keymaps 'rune/file-keymap
     "f" '(:ignore t :which-key "file")
     "fp" '(mish/open-personal-config-dir :which-key "open personal config"))

    (defvar-keymap rune/popup-keymap)
    (rune/leader-keys
      ;; :keymaps 'rune/popup-keymap
     "p" '(:ignore t :which-key "pop up")
     "pm" '(view-echo-area-messages :which-key "view messages"))

    (setq mish/help-map (copy-keymap help-map))

    (mish/global-leader-definer "h" '(:keymap mish/help-map :which-key "help"))

    )


  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (evil-collection-magit-setup)

  (use-package forge
    :after magit
    :config
    (setq auth-sources '("~/.authinfo")))
  ;; https://magit.vc/manual/ghub/Storing-a-Token.html

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    ;; (setq evil-auto-indent nil)
    )

  (use-package org
    :config
    (setq org-ellipsis " ▾"
	  ;; org-hide-emphasis-markers t
	  )
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-files '("~/.emacs.d/tasks.org"))
    )

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

  (require 'org-tempo)
  ;; don't ask for permission to run each time
  (setq org-confirm-babel-evaluate nil)

  ;; now if we type <el and hit tab, we will get an emacs-lisp code block
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

	#+end_src
** Org Mode
*** Literate Config Settings
Automatically tangle out our emacs.org config file when we save it:
#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/config.org"

					  (let ((org-confirm-babel-eval nil))
					    (org-babel-tagnle)))

			(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config))) 
#+end_src
*** Org Mode Config Settings
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src
